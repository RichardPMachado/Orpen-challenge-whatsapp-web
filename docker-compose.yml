version: '3.1'

services:
#   web:
#     container_name: Orpen_challenge_web
#     build:
#       context: ./web
#     ports:
#       - "5173:5173"
#     working_dir: /web
#     networks:
#       - challenge-app
#     platform: linux/x86_64
#     volumes:
#       - ./web:/web
#     depends_on:
#       api:
#         condition: service_healthy
#     healthcheck:
#       test: ["CMD", "lsof", "-t", "-i:5173"]
#       interval: 10s
#       timeout: 10s
#       retries: 5
#   api:
#     container_name: orpen_challenge_api
#     build:
#       context: ./api
#       args:
#         - NODE_ENV=development
#     restart: always
#     ports:
#       - "3000:3000"
#     platform: linux/x86_64
#     working_dir: /api
#     networks:
#       - challenge-app
#     volumes:
#       - ./api:/api
#     command: dev
#     env_file:
#       - .env
#     depends_on:
#       postgres:
#         condition: service_healthy
#     healthcheck:
#       test: ["CMD", "lsof", "-t", "-i:3000"]
#       interval: 10s
#       timeout: 10s
#       retries: 5
  postgres:
    container_name: orpen_challenge_database
    image: postgres:14.1-alpine
    platform: linux/x86_64
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      timeout: 10s
      retries: 5
    cap_add:
      - SYS_NICE # Deve omitir alertas menores
volumes:
  pg-data:
  # pgadmin-data:
# networks:
#   challenge-app:
#     driver: bridge